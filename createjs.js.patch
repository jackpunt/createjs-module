*** createjs.js	2022-06-20 23:09:09.000000000 -0700
--- createjs-patched.js	2022-06-20 23:09:08.000000000 -0700
***************
*** 1,4 ****
--- 1,5 ----
  var createjs = (this.createjs = (this.createjs || {}));
+ var ww; try { ww = window} catch { ww = false }
  /*!
  * EaselJS
  * Visit http://createjs.com/ for documentation, updates and examples.
***************
*** 630,636 ****
  	 * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when
  	 * the event is dispatched.
  	 * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).
! 	 * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.
  	 * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.
  	 * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
  	 * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.
--- 631,637 ----
  	 * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when
  	 * the event is dispatched.
  	 * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).
! 	 * @param {Boolean} [once=false] If true, the listener is removed before the first time it is triggered.
  	 * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.
  	 * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
  	 * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.
***************
*** 641,650 ****
  			listener = listener.handleEvent;
  		}
  		scope = scope||this;
! 		return this.addEventListener(type, function(evt) {
! 				listener.call(scope, evt, data);
! 				once&&evt.remove();
! 			}, useCapture);
  	};
  
  	/**
--- 642,652 ----
  			listener = listener.handleEvent;
  		}
  		scope = scope||this;
! 		let d=this,listnr = function (evt) {
! 			once&&d.removeEventListener(type, listnr, useCapture)
! 			listener.call(scope, evt, data);
! 		}
! 		return this.addEventListener(type, listnr, useCapture);
  	};
  
  	/**
***************
*** 1413,1419 ****
  	 * @static
  	 * @private
  	 **/
! 	var w=window, now=w.performance.now || w.performance.mozNow || w.performance.msNow || w.performance.oNow || w.performance.webkitNow;
  	Ticker._getTime = function() {
  		return ((now&&now.call(w.performance))||(new Date().getTime())) - Ticker._startTime;
  	};
--- 1415,1421 ----
  	 * @static
  	 * @private
  	 **/
! 	 var w=ww&&window, now=ww&&(w.performance.now || w.performance.mozNow || w.performance.msNow || w.performance.oNow || w.performance.webkitNow);
  	Ticker._getTime = function() {
  		return ((now&&now.call(w.performance))||(new Date().getTime())) - Ticker._startTime;
  	};
***************
*** 3922,3928 ****
  	 * @protected
  	 * @type {CanvasRenderingContext2D}
  	 **/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
  	if (canvas.getContext) {
  		Graphics._ctx = canvas.getContext("2d");
  		canvas.width = canvas.height = 1;
--- 3924,3930 ----
  	 * @protected
  	 * @type {CanvasRenderingContext2D}
  	 **/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():ww&&document.createElement("canvas"));
  	if (canvas.getContext) {
  		Graphics._ctx = canvas.getContext("2d");
  		canvas.width = canvas.height = 1;
***************
*** 6346,6352 ****
  	 * @static
  	 * @protected
  	 **/
! 	var canvas = createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"); // prevent errors on load in browsers without canvas.
  	if (canvas.getContext) {
  		DisplayObject._hitTestCanvas = canvas;
  		DisplayObject._hitTestContext = canvas.getContext("2d");
--- 6348,6354 ----
  	 * @static
  	 * @protected
  	 **/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():ww&&document.createElement("canvas")); // prevent errors on load in browsers without canvas.
  	if (canvas.getContext) {
  		DisplayObject._hitTestCanvas = canvas;
  		DisplayObject._hitTestContext = canvas.getContext("2d");
***************
*** 7937,7943 ****
  		 * @property canvas
  		 * @type HTMLCanvasElement | Object
  		 **/
! 		this.canvas = (typeof canvas == "string") ? document.getElementById(canvas) : canvas;
  	
  		/**
  		 * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent
--- 7939,7945 ----
  		 * @property canvas
  		 * @type HTMLCanvasElement | Object
  		 **/
! 		this.canvas = (typeof canvas == "string") ? ww&&document.getElementById(canvas) : canvas;
  	
  		/**
  		 * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent
***************
*** 8608,8613 ****
--- 8610,8616 ----
  			nextStage&&nextStage._testMouseOver(clear, owner, eventTarget);
  			return;
  		}
+ 		if (this.stage.canvas) {
  		var o = this._getPointerData(-1);
  		// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.
  		if (!o || (!clear && this.mouseX == this._mouseOverX && this.mouseY == this._mouseOverY && this.mouseInBounds)) { return; }
***************
*** 8657,8662 ****
--- 8660,8666 ----
  		if (oldTarget != target) {
  			this._dispatchMouseEvent(target, "mouseover", true, -1, o, e, oldTarget);
  		}
+ 		}
  		
  		nextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);
  	};
***************
*** 11999,12005 ****
  	 * @type CanvasRenderingContext2D
  	 * @private
  	 **/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
  	if (canvas.getContext) { Text._workingContext = canvas.getContext("2d"); canvas.width = canvas.height = 1; }
  	
  	
--- 12001,12007 ----
  	 * @type CanvasRenderingContext2D
  	 * @private
  	 **/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():ww&&document.createElement("canvas"));
  	if (canvas.getContext) { Text._workingContext = canvas.getContext("2d"); canvas.width = canvas.height = 1; }
  	
  	
***************
*** 13361,13367 ****
  	 * @type CanvasRenderingContext2D
  	 * @protected
  	*/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));
  	if (canvas.getContext) {
  		SpriteSheetUtils._workingCanvas = canvas;
  		SpriteSheetUtils._workingContext = canvas.getContext("2d");
--- 13363,13369 ----
  	 * @type CanvasRenderingContext2D
  	 * @protected
  	*/
! 	var canvas = (createjs.createCanvas?createjs.createCanvas():ww&&document.createElement("canvas"));
  	if (canvas.getContext) {
  		SpriteSheetUtils._workingCanvas = canvas;
  		SpriteSheetUtils._workingContext = canvas.getContext("2d");
***************
*** 13848,13854 ****
  			if (o.w > x) { x = o.w; }
  			y += o.h;
  			if (!o.h || !frames.length) {
! 				var canvas = createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");
  				canvas.width = this._getSize(x,this.maxWidth);
  				canvas.height = this._getSize(y,this.maxHeight);
  				this._data.images[img] = canvas;
--- 13850,13856 ----
  			if (o.w > x) { x = o.w; }
  			y += o.h;
  			if (!o.h || !frames.length) {
! 				var canvas = (createjs.createCanvas?createjs.createCanvas():ww&&document.createElement("canvas"));
  				canvas.width = this._getSize(x,this.maxWidth);
  				canvas.height = this._getSize(y,this.maxHeight);
  				this._data.images[img] = canvas;
***************
*** 33168,33177 ****
  			listener = listener.handleEvent;
  		}
  		scope = scope||this;
! 		return this.addEventListener(type, function(evt) {
! 				listener.call(scope, evt, data);
! 				once&&evt.remove();
! 			}, useCapture);
  	};
  
  	/**
--- 33170,33181 ----
  			listener = listener.handleEvent;
  		}
  		scope = scope||this;
! 		let d=this,listnr = function (evt) {
! 			once&&d.removeEventListener(type, listnr, useCapture)
! 			listener.call(scope, evt, data);
! 		}
! 		return this.addEventListener(type, listnr, useCapture);
! 
  	};
  
  	/**
